<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KnxMonitor</name>
    </assembly>
    <members>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants">
            <summary>
            Constants for KNX Monitor configuration and validation.
            Provides configuration boundaries and limits.
            </summary>
        </member>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants.Network">
            <summary>
            Network configuration constants.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.MinPort">
            <summary>
            Minimum valid port number.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.MaxPort">
            <summary>
            Maximum valid port number.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.DefaultHealthCheckPort">
            <summary>
            Default health check port.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.DefaultKnxPort">
            <summary>
            Default KNX IP port.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.MaxRetryAttempts">
            <summary>
            Maximum connection retry attempts.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Network.BaseRetryDelaySeconds">
            <summary>
            Base retry delay in seconds.
            </summary>
        </member>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants.FileSystem">
            <summary>
            File system configuration constants.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.FileSystem.MaxCsvFileSizeBytes">
            <summary>
            Maximum CSV file size in bytes (10 MB).
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.FileSystem.MaxGroupAddresses">
            <summary>
            Maximum number of group addresses in CSV.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.FileSystem.SupportedEncodings">
            <summary>
            Supported CSV encodings.
            </summary>
        </member>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants.Knx">
            <summary>
            KNX protocol configuration constants.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Knx.MaxDataLength">
            <summary>
            Maximum KNX data length in bytes.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Knx.ValidConnectionTypes">
            <summary>
            Valid KNX connection types.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Knx.MaxGroupAddressMain">
            <summary>
            Maximum group address value (15/7/255).
            </summary>
        </member>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants.Performance">
            <summary>
            Performance and resource limits.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Performance.MaxMessageQueueSize">
            <summary>
            Maximum message queue size.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Performance.MessageProcessingTimeoutMs">
            <summary>
            Message processing timeout in milliseconds.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Performance.MaxConcurrentConnections">
            <summary>
            Maximum concurrent connections.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Performance.DefaultBufferSize">
            <summary>
            Default buffer size for network operations.
            </summary>
        </member>
        <member name="T:KnxMonitor.Configuration.KnxMonitorConstants.Logging">
            <summary>
            Logging configuration constants.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Logging.MaxLogMessageLength">
            <summary>
            Maximum log message length.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Logging.DefaultLogRetentionDays">
            <summary>
            Default log retention days.
            </summary>
        </member>
        <member name="F:KnxMonitor.Configuration.KnxMonitorConstants.Logging.MaxLogFileSizeBytes">
            <summary>
            Maximum log file size in bytes (100 MB).
            </summary>
        </member>
        <member name="T:KnxMonitor.Logging.KnxConsoleFormatter">
            <summary>
            Custom console formatter for clean KNX message output.
            Provides clean, readable output for KNX messages while maintaining structured logging benefits.
            </summary>
        </member>
        <member name="M:KnxMonitor.Logging.KnxConsoleFormatter.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{KnxMonitor.Logging.KnxConsoleFormatterOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Logging.KnxConsoleFormatter"/> class.
            </summary>
            <param name="options">The formatter options.</param>
        </member>
        <member name="M:KnxMonitor.Logging.KnxConsoleFormatter.Write``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@,Microsoft.Extensions.Logging.IExternalScopeProvider,System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="T:KnxMonitor.Logging.KnxConsoleFormatterOptions">
            <summary>
            Options for the KNX console formatter.
            </summary>
        </member>
        <member name="P:KnxMonitor.Logging.KnxConsoleFormatterOptions.IncludeTimestamps">
            <summary>
            Gets or sets a value indicating whether to include timestamps for non-KNX messages.
            </summary>
        </member>
        <member name="P:KnxMonitor.Logging.KnxConsoleFormatterOptions.UseCleanKnxFormat">
            <summary>
            Gets or sets a value indicating whether to use clean format for KNX messages.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxMessage">
            <summary>
            Represents a KNX bus message for display purposes.
            Simplified to work directly with Falcon SDK decoded values - no DPT guessing rubbish.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.Timestamp">
            <summary>
            Gets or sets the timestamp when the message was received.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.SourceAddress">
            <summary>
            Gets or sets the source address of the message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.GroupAddress">
            <summary>
            Gets or sets the destination group address.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.MessageType">
            <summary>
            Gets or sets the message type (Read, Write, Response).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.Data">
            <summary>
            Gets or sets the raw data payload.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.Value">
            <summary>
            Gets or sets the interpreted value from Falcon SDK.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.DataPointType">
            <summary>
            Gets or sets the data point type (if known from Falcon SDK).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.Description">
            <summary>
            Gets or sets the description from the group address database.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.Priority">
            <summary>
            Gets or sets the message priority.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.IsRepeated">
            <summary>
            Gets or sets a value indicating whether this message was repeated.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.DataHex">
            <summary>
            Gets the data as a hexadecimal string.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessage.DisplayValue">
            <summary>
            Gets a formatted display value using Falcon SDK decoded value.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxMessageType">
            <summary>
            KNX message types.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxMessageType.Read">
            <summary>
            Read request.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxMessageType.Write">
            <summary>
            Write request.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxMessageType.Response">
            <summary>
            Response to read request.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxPriority">
            <summary>
            KNX message priorities.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxPriority.System">
            <summary>
            System priority.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxPriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxPriority.Urgent">
            <summary>
            Urgent priority.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxPriority.Low">
            <summary>
            Low priority.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxMonitorConfig">
            <summary>
            Configuration for the KNX monitor.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.ConnectionType">
            <summary>
            Gets or sets the KNX connection type.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.Gateway">
            <summary>
            Gets or sets the KNX gateway address (required for tunnel connections).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.MulticastAddress">
            <summary>
            Gets or sets the multicast address for router connections (default: 224.0.23.12).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.Port">
            <summary>
            Gets or sets the port number (default: 3671).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.Verbose">
            <summary>
            Gets or sets a value indicating whether verbose logging is enabled.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.Filter">
            <summary>
            Gets or sets the group address filter pattern.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMonitorConfig.GroupAddressCsvPath">
            <summary>
            Gets or sets the path to the KNX group address CSV file exported from ETS.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxConnectionType">
            <summary>
            KNX connection types supported by the monitor.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxConnectionType.Tunnel">
            <summary>
            IP Tunneling connection.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxConnectionType.Router">
            <summary>
            IP Routing connection.
            </summary>
        </member>
        <member name="F:KnxMonitor.Models.KnxConnectionType.Usb">
            <summary>
            USB connection.
            </summary>
        </member>
        <member name="T:KnxMonitor.Models.KnxMessageTableModel">
            <summary>
            Data model for Terminal.Gui TableView integration.
            Provides observable collection with real-time updates and filtering capabilities.
            </summary>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageTableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Models.KnxMessageTableModel"/> class.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageTableModel.Messages">
            <summary>
            Gets the observable collection of KNX messages.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageTableModel.Filter">
            <summary>
            Gets or sets the current filter pattern.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageTableModel.MaxMessages">
            <summary>
            Gets or sets the maximum number of messages to retain.
            </summary>
        </member>
        <member name="E:KnxMonitor.Models.KnxMessageTableModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageTableModel.AddMessage(KnxMonitor.Models.KnxMessage)">
            <summary>
            Adds a new KNX message to the table model.
            </summary>
            <param name="message">The KNX message to add.</param>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageTableModel.Clear">
            <summary>
            Clears all messages from the table model.
            </summary>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageTableModel.GetAllMessages">
            <summary>
            Gets all messages as a list for export purposes.
            </summary>
            <returns>List of all current messages.</returns>
        </member>
        <member name="T:KnxMonitor.Models.KnxMessageRow">
            <summary>
            Row model for KNX message display in TableView.
            Provides formatted display values and color coding information.
            </summary>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageRow.#ctor(KnxMonitor.Models.KnxMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Models.KnxMessageRow"/> class.
            </summary>
            <param name="message">The source KNX message.</param>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.Message">
            <summary>
            Gets the original KNX message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.TimeDisplay">
            <summary>
            Gets the formatted time display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.MessageTypeDisplay">
            <summary>
            Gets the formatted message action display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.SourceDisplay">
            <summary>
            Gets the formatted source display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.GroupAddressDisplay">
            <summary>
            Gets the formatted group address display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.ValueDisplay">
            <summary>
            Gets the formatted value display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.PriorityDisplay">
            <summary>
            Gets the formatted priority display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.DataDisplay">
            <summary>
            Gets the formatted raw data display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.DptDisplay">
            <summary>
            Gets the DPT (Data Point Type) display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.DescriptionDisplay">
            <summary>
            Gets the formatted description display (truncated for table view).
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.AgeColorCode">
            <summary>
            Gets the age-based color code for the message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.TypeColorCode">
            <summary>
            Gets the type-based color code for the message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.KnxMessageRow.PriorityColorCode">
            <summary>
            Gets the priority-based color code for the message.
            </summary>
        </member>
        <member name="M:KnxMonitor.Models.KnxMessageRow.FormatDescriptionForTable(System.String)">
            <summary>
            Formats description for table display with maximum width constraint.
            </summary>
            <param name="description">Raw description.</param>
            <returns>Formatted description suitable for table display.</returns>
        </member>
        <member name="T:KnxMonitor.Models.ConnectionStatusModel">
            <summary>
            Connection status model for real-time display updates.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.IsConnected">
            <summary>
            Gets or sets a value indicating whether the connection is active.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.ConnectionType">
            <summary>
            Gets or sets the connection type display text.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.Gateway">
            <summary>
            Gets or sets the gateway address.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.Port">
            <summary>
            Gets or sets the connection port.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.Filter">
            <summary>
            Gets or sets the current filter pattern.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.MessageCount">
            <summary>
            Gets or sets the total message count.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.StartTime">
            <summary>
            Gets or sets the application start time.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.LastError">
            <summary>
            Gets or sets the last error message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.ConnectionStatusDisplay">
            <summary>
            Gets the formatted connection status display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.FilterDisplay">
            <summary>
            Gets the formatted filter display.
            </summary>
        </member>
        <member name="P:KnxMonitor.Models.ConnectionStatusModel.UptimeDisplay">
            <summary>
            Gets the formatted uptime display.
            </summary>
        </member>
        <member name="E:KnxMonitor.Models.ConnectionStatusModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:KnxMonitor.Program">
            <summary>
            Main program entry point for the KNX Monitor application.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for Program class.
            Event IDs: 1000-1999 (Application/Program level)
            </summary>
        </member>
        <member name="M:KnxMonitor.Program.Main(System.String[])">
            <summary>
            Main entry point for the application.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>Exit code.</returns>
        </member>
        <member name="M:KnxMonitor.Program.OnCancelKeyPress(System.Object,System.ConsoleCancelEventArgs)">
            <summary>
            Handles Ctrl+C at the application level to coordinate shutdown between main program and TUI.
            </summary>
        </member>
        <member name="M:KnxMonitor.Program.RunMonitorAsync(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Runs the KNX monitor with the specified configuration.
            </summary>
            <param name="gateway">Gateway address (for tunnel connections).</param>
            <param name="connectionType">Connection type (tunnel/router/usb).</param>
            <param name="multicastAddress">Multicast address (for router connections).</param>
            <param name="port">Port number.</param>
            <param name="verbose">Enable verbose logging.</param>
            <param name="filter">Group address filter.</param>
            <param name="csvPath">Path to KNX group address CSV file exported from ETS.</param>
            <param name="loggingMode">Force simple logging mode instead of TUI.</param>
            <param name="enableHealthCheck">Enable HTTP health check service (auto-enabled in containers).</param>
            <returns>Exit code (0 = success, >0 = error).</returns>
        </member>
        <member name="M:KnxMonitor.Program.CleanupServicesAsync(Microsoft.Extensions.Hosting.IHost,KnxMonitor.Services.IKnxMonitorService,KnxMonitor.Services.IDisplayService,KnxMonitor.Services.HealthCheckService)">
            <summary>
            Performs graceful cleanup of all services in the correct order.
            </summary>
            <param name="host">The host instance.</param>
            <param name="monitorService">The KNX monitor service.</param>
            <param name="displayService">The display service.</param>
            <param name="healthCheckService">The health check service.</param>
        </member>
        <member name="M:KnxMonitor.Program.DisplayStartupBanner">
            <summary>
            Displays the startup banner with version information.
            </summary>
        </member>
        <member name="M:KnxMonitor.Program.ParseConnectionType(System.String)">
            <summary>
            Parses the connection type string.
            </summary>
            <param name="connectionType">Connection type string.</param>
            <returns>Parsed connection type.</returns>
        </member>
        <member name="M:KnxMonitor.Program.ValidateConfiguration(KnxMonitor.Models.KnxMonitorConfig)">
            <summary>
            Validates the configuration.
            </summary>
            <param name="config">Configuration to validate.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:KnxMonitor.Program.ShouldUseTuiMode(System.Boolean)">
            <summary>
            Determines whether to use Terminal.Gui TUI mode or console logging mode.
            </summary>
            <param name="forceLoggingMode">Force logging mode regardless of environment.</param>
            <returns>True if TUI mode should be used, false for logging mode.</returns>
        </member>
        <member name="M:KnxMonitor.Program.StartMonitoringWithRetry(KnxMonitor.Services.IKnxMonitorService,System.Threading.CancellationToken)">
            <summary>
            Starts the monitoring service with Polly retry logic.
            </summary>
            <param name="monitorService">The monitor service to start.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when connection fails after all retries.</exception>
        </member>
        <member name="M:KnxMonitor.Program.DisplayVersionInformation">
            <summary>
            Displays concise version information including GitVersion details.
            </summary>
        </member>
        <member name="T:KnxMonitor.Services.DisplayService">
            <summary>
            Service for displaying KNX monitor output in console logging mode.
            Used when output is redirected or in containerized environments.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for DisplayService.
            Event IDs: 4000-4099 (UI/Display Services)
            Eliminates boxing, reduces allocations, and provides compile-time safety.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.#ctor(KnxMonitor.Models.KnxMonitorConfig,Microsoft.Extensions.Logging.ILogger{KnxMonitor.Services.DisplayService})">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Services.DisplayService"/> class.
            </summary>
            <param name="config">Monitor configuration.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="P:KnxMonitor.Services.DisplayService.IsRunning">
            <inheritdoc/>
        </member>
        <member name="P:KnxMonitor.Services.DisplayService.CurrentFilter">
            <inheritdoc/>
        </member>
        <member name="P:KnxMonitor.Services.DisplayService.MessageCount">
            <inheritdoc/>
        </member>
        <member name="P:KnxMonitor.Services.DisplayService.StartTime">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.StartAsync(KnxMonitor.Services.IKnxMonitorService,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.UpdateConnectionStatus(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.DisplayMessage(KnxMonitor.Models.KnxMessage)">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:KnxMonitor.Services.DisplayService.ShouldUseLoggingMode">
            <summary>
            Determines whether to use logging mode based on output redirection.
            </summary>
            <returns>True if logging mode should be used, false for interactive mode.</returns>
        </member>
        <member name="T:KnxMonitor.Services.HealthCheckService">
            <summary>
            Simple HTTP health check service for container health monitoring.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for HealthCheckService.
            Eliminates boxing, reduces allocations, and provides compile-time safety.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.HealthCheckService.StartAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Starts the health check HTTP server.
            </summary>
            <param name="port">Port to listen on (default: 8080).</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:KnxMonitor.Services.HealthCheckService.StopAsync">
            <summary>
            Stops the health check HTTP server.
            </summary>
        </member>
        <member name="T:KnxMonitor.Services.IDisplayService">
            <summary>
            Interface for display services that can show KNX monitor output.
            Supports both Terminal.Gui interactive mode and console logging mode.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IDisplayService.IsRunning">
            <summary>
            Gets a value indicating whether the display service is currently running.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IDisplayService.CurrentFilter">
            <summary>
            Gets the current filter pattern applied to messages.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IDisplayService.MessageCount">
            <summary>
            Gets the total number of messages processed.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IDisplayService.StartTime">
            <summary>
            Gets the application start time.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.IDisplayService.StartAsync(KnxMonitor.Services.IKnxMonitorService,System.Threading.CancellationToken)">
            <summary>
            Starts the display service asynchronously.
            </summary>
            <param name="monitorService">The KNX monitor service to display data from.</param>
            <param name="cancellationToken">Cancellation token for graceful shutdown.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:KnxMonitor.Services.IDisplayService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the display service asynchronously.
            </summary>
            <param name="cancellationToken">Cancellation token for graceful shutdown.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:KnxMonitor.Services.IDisplayService.UpdateConnectionStatus(System.String,System.Boolean)">
            <summary>
            Updates the connection status display.
            </summary>
            <param name="status">Connection status.</param>
            <param name="isConnected">Whether the connection is active.</param>
        </member>
        <member name="M:KnxMonitor.Services.IDisplayService.DisplayMessage(KnxMonitor.Models.KnxMessage)">
            <summary>
            Displays a KNX message.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:KnxMonitor.Services.IKnxMonitorService">
            <summary>
            Interface for the KNX monitoring service.
            </summary>
        </member>
        <member name="E:KnxMonitor.Services.IKnxMonitorService.MessageReceived">
            <summary>
            Event raised when a KNX message is received.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IKnxMonitorService.IsConnected">
            <summary>
            Gets a value indicating whether the monitor is connected.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IKnxMonitorService.ConnectionStatus">
            <summary>
            Gets the connection status message.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IKnxMonitorService.MessageCount">
            <summary>
            Gets the total number of messages received since monitoring started.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.IKnxMonitorService.IsCsvLoaded">
            <summary>
            Gets a value indicating whether a CSV group address database has been loaded.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.IKnxMonitorService.StartMonitoringAsync(System.Threading.CancellationToken)">
            <summary>
            Starts monitoring the KNX bus.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:KnxMonitor.Services.IKnxMonitorService.StopMonitoringAsync(System.Threading.CancellationToken)">
            <summary>
            Stops monitoring the KNX bus.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:KnxMonitor.Services.ITuiDisplayService">
            <summary>
            Terminal User Interface service for KNX Monitor.
            Provides rich, interactive display capabilities using Terminal.Gui V2.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.ITuiDisplayService.IsRunning">
            <summary>
            Gets a value indicating whether the TUI is currently running.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.ITuiDisplayService.CurrentFilter">
            <summary>
            Gets the current filter pattern applied to messages.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.ITuiDisplayService.MessageCount">
            <summary>
            Gets the total number of messages processed.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.ITuiDisplayService.StartTime">
            <summary>
            Gets the application start time.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.ITuiDisplayService.StartAsync(KnxMonitor.Services.IKnxMonitorService,System.Threading.CancellationToken)">
            <summary>
            Starts the Terminal User Interface asynchronously.
            </summary>
            <param name="monitorService">The KNX monitor service to display data from.</param>
            <param name="cancellationToken">Cancellation token for graceful shutdown.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:KnxMonitor.Services.ITuiDisplayService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the Terminal User Interface asynchronously.
            </summary>
            <param name="cancellationToken">Cancellation token for graceful shutdown.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:KnxMonitor.Services.ITuiDisplayService.UpdateFilter(System.String)">
            <summary>
            Updates the filter pattern for message display.
            </summary>
            <param name="filter">The new filter pattern (null to clear filter).</param>
        </member>
        <member name="M:KnxMonitor.Services.ITuiDisplayService.ClearMessages">
            <summary>
            Clears all displayed messages.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.ITuiDisplayService.ExportMessagesAsync(System.String)">
            <summary>
            Exports current messages to a file.
            </summary>
            <param name="filePath">Path to export file.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:KnxMonitor.Services.KnxDptDecoder">
            <summary>
            KNX DPT decoder using Falcon SDK's built-in decoding functionality.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for KnxDptDecoder.
            Event IDs: 3100-3199 (Data Services - Decoder)
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.#ctor(Microsoft.Extensions.Logging.ILogger{KnxMonitor.Services.KnxDptDecoder})">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Services.KnxDptDecoder"/> class.
            </summary>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.DecodeValue(Knx.Falcon.GroupValue,System.String)">
            <summary>
            Decodes a GroupValue using the specified DPT.
            </summary>
            <param name="groupValue">The GroupValue to decode.</param>
            <param name="dptString">The DPT string (e.g., "DPST-1-1").</param>
            <returns>Decoded value or null if decoding failed.</returns>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.GetDatapointSubtype(System.String)">
            <summary>
            Gets a DatapointSubtype from a DPT string.
            </summary>
            <param name="dptString">DPT string (e.g., "DPST-1-1").</param>
            <returns>DatapointSubtype or null if not found.</returns>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.ParseDptString(System.String)">
            <summary>
            Parses a DPT string into main and sub type numbers.
            </summary>
            <param name="dptString">DPT string (e.g., "DPST-1-1").</param>
            <returns>Tuple of main and sub type numbers, or null if parsing failed.</returns>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.FindDatapointSubtype(System.Int32,System.Int32)">
            <summary>
            Finds a DatapointSubtype by main and sub type numbers.
            </summary>
            <param name="mainType">Main type number (e.g., 1).</param>
            <param name="subType">Sub type number (e.g., 1).</param>
            <returns>DatapointSubtype or null if not found.</returns>
        </member>
        <member name="M:KnxMonitor.Services.KnxDptDecoder.FormatDecodedValue(System.Object,System.String)">
            <summary>
            Formats the decoded value for display.
            </summary>
            <param name="decodedValue">The decoded value from Falcon SDK.</param>
            <param name="dptString">The DPT string for context.</param>
            <returns>Formatted string representation.</returns>
        </member>
        <member name="T:KnxMonitor.Services.KnxGroupAddressDatabase">
            <summary>
            Database for KNX group addresses loaded from ETS CSV export.
            Supports ETS export format "3/1" with semicolon separation.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for KnxGroupAddressDatabase.
            Event IDs: 3000-3099 (Data Services - Database)
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.KnxGroupAddressDatabase.#ctor(Microsoft.Extensions.Logging.ILogger{KnxMonitor.Services.KnxGroupAddressDatabase})">
            <summary>
            Initializes a new instance of the <see cref="T:KnxMonitor.Services.KnxGroupAddressDatabase"/> class.
            </summary>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:KnxMonitor.Services.KnxGroupAddressDatabase.LoadFromCsvAsync(System.String)">
            <summary>
            Loads group addresses from ETS CSV export file.
            </summary>
            <param name="csvFilePath">Path to the CSV file.</param>
            <returns>Task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when CSV format is invalid.</exception>
        </member>
        <member name="M:KnxMonitor.Services.KnxGroupAddressDatabase.GetGroupAddressInfo(System.String)">
            <summary>
            Gets group address information for the specified address.
            </summary>
            <param name="groupAddress">Group address (e.g., "1/2/3").</param>
            <returns>Group address info if found, null otherwise.</returns>
        </member>
        <member name="P:KnxMonitor.Services.KnxGroupAddressDatabase.Count">
            <summary>
            Gets the count of loaded group addresses.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.KnxGroupAddressDatabase.IsCsvLoaded">
            <summary>
            Gets a value indicating whether a CSV file has been successfully loaded.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.KnxGroupAddressDatabase.SplitCsvIntoLogicalLines(System.String)">
            <summary>
            Splits CSV content into logical lines, handling multi-line quoted fields.
            </summary>
            <param name="csvContent">The entire CSV file content.</param>
            <returns>Array of logical CSV lines.</returns>
        </member>
        <member name="T:KnxMonitor.Services.GroupAddressInfo">
            <summary>
            Information about a KNX group address from ETS export.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.Address">
            <summary>
            Gets or sets the group address (e.g., "1/2/3").
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.Main">
            <summary>
            Gets or sets the main group name.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.Middle">
            <summary>
            Gets or sets the middle group name.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.Sub">
            <summary>
            Gets or sets the sub group name.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.DatapointType">
            <summary>
            Gets or sets the datapoint type (e.g., "DPST-1-1").
            </summary>
        </member>
        <member name="P:KnxMonitor.Services.GroupAddressInfo.DisplayName">
            <summary>
            Gets a display name for the group address.
            </summary>
        </member>
        <member name="T:KnxMonitor.Services.KnxMonitorService">
            <summary>
            High-performance LoggerMessage definitions for KnxMonitorService.
            Event IDs: 2000-2999 (Core Services)
            </summary>
            <summary>
            Simplified KNX Monitor service that trusts Falcon SDK completely for decoding.
            No manual decoding fallbacks - if Falcon can't decode it, we show an error.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.KnxMonitorService.FormatDescriptionForLogging(System.String)">
            <summary>
            Formats description for logging with best practices.
            </summary>
            <param name="description">Raw description from CSV.</param>
            <returns>Formatted description suitable for logging.</returns>
        </member>
        <member name="M:KnxMonitor.Services.KnxMonitorService.FormatValueForLogging(System.Object,System.String)">
            <summary>
            Formats value for logging with proper type-specific formatting.
            </summary>
            <param name="value">The value to format.</param>
            <param name="dptType">The DPT type for context.</param>
            <returns>Formatted value string.</returns>
        </member>
        <member name="T:KnxMonitor.Services.KnxMonitorService.__LogDetailedKnxMessageStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:KnxMonitor.Services.TuiDisplayService">
            <summary>
            Award-worthy Terminal.Gui V2 implementation for KNX Monitor.
            Provides windowed interface with proper V2 API compatibility and coordinated shutdown.
            </summary>
            <summary>
            High-performance LoggerMessage definitions for TuiDisplayService.
            Eliminates boxing, reduces allocations, and provides compile-time safety.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.TuiDisplayService.RequestShutdown">
            <summary>
            Requests shutdown of the TUI application.
            This method is called by the main program's Ctrl+C handler or F10 key.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.TuiDisplayService.OnMessageReceived(System.Object,KnxMonitor.Models.KnxMessage)">
            <summary>
            Handles KNX messages received from the monitor service.
            </summary>
        </member>
        <member name="M:KnxMonitor.Services.TuiDisplayService.OnRefreshTimer(System.Object)">
            <summary>
            Periodic refresh timer callback to ensure UI updates.
            </summary>
        </member>
        <member name="T:KnxMonitor.Services.KnxMessageTableSource">
            <summary>
            Table source implementation for Terminal.Gui V2 TableView
            </summary>
        </member>
    </members>
</doc>
